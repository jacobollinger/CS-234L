
For each question, show the tree obtained after applying the given operation, before any rotation is made.
Then, balance the tree by writing each rotation, and showing the tree obtained after each one.
The trees are shown in the file tree.png.

To display a tree, write each value in increasing order followed by the height of the corresponding node. For example the tree A is given by
10/0, 20/2, 25/0, 30/1, 35/0, 50/3, 55/0, 60/1, 70/2, 80/0.

Write your answers in a text file ps4.txt.

The questions:
(a) Insert 33 to the tree A.
(b) Insert 26 to the tree B.
(c) Delete 20 from the tree C.
(d) Delete 80 from the tree D.
(e) Delete 50 from the tree E.

An example: Insert 58 to the tree A.
The answer is:
10/0, 20/2, 25/0, 30/1, 35/0, 50/3, 55/0, 60/1, 70/2, 80/0
insert 58
10/0, 20/2, 25/0, 30/1, 35/0, 50/4, 55/1, 58/0, 60/2, 70/3, 80/0
left rotation on 55
10/0, 20/2, 25/0, 30/1, 35/0, 50/4, 55/0, 58/1, 60/2, 70/3, 80/0
right rotation on 60
10/0, 20/2, 25/0, 30/1, 35/0, 50/3, 55/0, 58/1, 60/0, 70/2, 80/0

The balancing code:
int height(Node x) {
    return x == null ? -1 : x.height;
}

int heightDifference(Node x) {
    return height(x.left) - height(x.right);
}

void balance(Node x) {
    if(heightDifference(x) < -1) {
        if(heightDifference(x.right) > 0)
            rotateRight(x.right);
            rotateLeft(x);
    }
    else if(heightDifference(x) > 1) {
        if(heightDifference(x.left) < 0)
            rotateLeft(x.left);
            rotateRight(x);
    }
}

The deletion code:
void delete(Node x) {
    if(x.left == null || x.right == null)
        detach(x);
    else {
        Node y = successor(x);
        x.value = y.value;
        detach(y);
    }
}